<한 것>
spa 구현
페이지 이동 -> 라우팅으로 구현

네이버 / 카카오 api  이용할 수 있게 수정할 계획.

<<참고할 사이트: instagram, pintrest, netflix, booking.com>>

   https://developers.naver.com/docs/login/devguide/devguide.md


네이버 / 카카오 api  ->로그인 Page

<></> 등 Fragment를 사용하는 이유는 Virtual DOM에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 DOM 트리 구조로 만들기 위함.

<할 것>
1. 
홈: data 읽어와서 detail 페이지, simple 카드 만들기
detail: id(에 맞는 제목) => 

2. 
검사(api 맞게 input 잡고, 서버 넘겨주기) -> 
3. 
검색





TestPage -  N S F T에 각각 3(또는 홀수)개씩의 질문 -> N/S F/T 전반적인 성향 파악 후 
해당 성향 + 선택한 영화의 Keyword/장르/출시연도 유사도가 높은 영화로 성향 출력!
(결과 페이지 꾸밀 수 있는만큼 진행 / 공유 가능할만큼 재미있거나 또는 예쁜 페이지 만들어야함)

프롬프트 엔지니어링 

#6
퍼블리싱 준비
네이버 SSO

-로그인 API 사용가능하도록 페이지 수정(SSR할 예정. 고려하기)
-Figma 새로 작성>> 구현하면서 동시 수정
   우리데이터- posterURL로 수정하기
-포스터 들어갈 박스 만들어서 비워두기(컨테이너로)
-mobile(또는 일정 width이하) : 네비게이션 바 구현-> 스와이프
-돌아가기 버튼 라우터에 추가

-검사P 추가
   ui 필터(각 성향에 맞게) 구현
   화면 캡쳐https://goodsgoods.tistory.com/268

- - - - -
프로젝트 구조 설계: 
기존 페이지의 내용을 React 컴포넌트로 분해하고, 필요한 경우 각 컴포넌트를 만듭니다. 
이때, 각 페이지를 React Router 등의 라우팅 라이브러리를 사용하여 라우팅할 수 있도록 합니다.

React 및 관련 라이브러리 설치: 
프로젝트에 React 및 관련 라이브러리를 설치합니다. 
보통 Create React App을 사용하여 새로운 React 프로젝트를 만드는 것이 가장 쉽습니다.

기존 코드 이식: 
기존 HTML, CSS 및 JavaScript 코드를 React 컴포넌트로 이식합니다. 
HTML을 JSX로 변환하고, CSS는 CSS 파일로 이동하고, JavaScript는 React 컴포넌트의 메서드로 변환합니다.

라우팅 설정: 
React Router 또는 다른 라우팅 라이브러리를 사용하여 페이지 간의 라우팅을 설정합니다. 
이를 통해 SPA의 각 페이지를 정의하고 사용자가 URL을 통해 해당 페이지로 이동할 수 있도록 합니다.

상태 관리 설정: 
Redux, MobX 또는 React의 내장 상태 관리 기능을 사용하여 애플리케이션의 상태를 관리합니다. 
이를 통해 데이터의 전역 상태를 효율적으로 관리하고 상태가 변경될 때 컴포넌트를 업데이트할 수 있습니다.

컴포넌트 분리 및 재사용: 
가능한 경우, 기존 페이지의 컴포넌트를 작은 단위로 분리하고 재사용 가능한 컴포넌트로 만듭니다.
 이렇게 하면 코드의 유지 관리가 쉬워지고, 애플리케이션의 성능도 향상됩니다.

테스트 및 디버깅: 
각 컴포넌트와 기능을 테스트하고 디버깅하여 애플리케이션이 예상대로 작동하는지 확인합니다.
 Jest, React Testing Library 등의 테스팅 도구를 사용하여 유닛 테스트 및 통합 테스트를 수행할 수 있습니다.

배포: 
애플리케이션을 테스트한 후에는 배포할 준비를 합니다. 필요한 경우 AWS, Firebase, Netlify 등의 
호스팅 서비스를 사용하여 애플리케이션을 배포합니다.

----------------------------------------------------------
### await와 axios 비교
Fetch API:

fetch는 네이티브 자바스크립트 함수로, 네트워크 요청을 만듭니다.
fetch는 Promise를 반환하며, 응답 객체(Response 객체)로 해결됩니다.
응답을 JSON으로 변환하려면 response.json()을 호출해야 합니다.
오류 처리는 response.ok를 확인하거나, 거부된 Promise를 처리하여 수행합니다.
Axios:

axios는 브라우저와 Node.js를 위한 Promise 기반의 HTTP 클라이언트입니다.
자동으로 응답을 JSON으로 변환합니다.
더 간결한 문법과 인터셉터(interceptors) 같은 추가 기능을 제공합니다.
시간 초과 및 요청 취소를 쉽게 처리할 수 있습니다.
Axios의 장점:

자동 JSON 변환: Axios는 응답을 자동으로 JSON으로 변환합니다. 반면 fetch는 .json()을 호출해야 합니다.
더 나은 오류 처리: Axios는 try-catch 블록을 사용하여 오류를 보다 직관적으로 처리할 수 있습니다.
구형 브라우저 지원: Axios는 fetch API보다 구형 브라우저를 더 잘 지원합니다.
요청/응답 인터셉터: Axios는 요청이나 응답을 처리하기 전에 가로챌 수 있어, 인증 토큰 추가나 로깅에 유용합니다.
시간 초과 처리: Axios는 요청 시간 초과를 설정할 수 있어 느린 네트워크 응답을 쉽게 처리할 수 있습니다.

JOB Description -
에서 제안하는 모든 스택을 어필하기(원하는 인재상 - 빙의하기 )
큰 규모 프로젝트 -> 내가 했던 프로젝트에서 적용할 수 있는 또는 수정할 부분 어필하기_
('지원을 준비하면서 수정해보았음')
선택과 집중! _ 시간이 물리적으로 부족 -> 다른 방법으로 추가하기!